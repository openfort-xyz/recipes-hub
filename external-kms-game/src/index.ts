import express, { Express, Request, Response } from "express";
import dotenv from "dotenv";
import { GcpKmsSigner } from "ethers-gcp-kms-signer";
import { utils } from "ethers";
import Openfort from "@openfort/openfort-node"

dotenv.config();
const openfort = new Openfort(process.env.OPENFORT_SECRET_KEY!);

const app: Express = express();
const port = process.env.PORT;
const apiUrl = process.env.API_URL;

async function sign_userop_hash(userop_hash: string) {
  const kmsCredentials = {
    projectId: process.env.PROJECTID!, // your project id in gcp
    locationId: process.env.LOCATIONID!, // the location where your key ring was created
    keyRingId: process.env.KEYRINGID!, // the id of the key ring
    keyId: process.env.KEYID!, // the name/id of your key in the key ring
    keyVersion: process.env.KEYVERSION!, // the version of the key
  };
  let signer = new GcpKmsSigner(kmsCredentials);
  let address = await signer.getAddress();
  console.log("Address of the owner signer: ", address);
  const signed_message = signer.signMessage(utils.arrayify(userop_hash));
  return signed_message;
}

app.get("/", async (req: Request, res: Response) => {
  let result;
  try {
    if (!apiUrl) {
      throw "No API URL provided";
    }
    result = await openfort.players.list();
  } catch (error) {
    console.error("Error:", error);
    throw error;
  }
  let message =
    "Send a request to /FULL_KMS_EXAMPLE to create a transaction intent and sign it using your own KMS.";
  message +=
    "</br></br>If you already have a userOp hash you want to sign, send it using the endpoint /Sign_KMS?userOperationHash= to get the signature";
  res.send(message);
  console.log(result);
});

// FULL_KMS_EXAMPLE call:
// It will generate a transaction intent that will later sign using the configured GCP KMS
app.get("/FULL_KMS_EXAMPLE", async (req: Request, res: Response) => {
  let result;
  const requestData = {
    player: process.env.OPENFORT_PLAYER!,
    chainId: Number(process.env.CHAIN_ID),
    optimistic: true,
    interactions: [
      {
        contract: process.env.OPENFORT_CONTRACT!,
        functionName: "mint",
        functionArgs: [process.env.OPENFORT_PLAYER!],
      },
    ],
    externalOwnerAddress: process.env.EXTERNAL_OWNER_ADDRESS!,
    policy: process.env.OPENFORT_POLICY!,
  };

  try {
    if (!apiUrl) {
      throw "No API URL provided";
    }
    result = await openfort.transactionIntents.create(requestData);
  } catch (error) {
    console.error("Error:", error);
    throw error;
  }
  if(!result.nextAction){
    return res.send("Alert! Account custody is not configured with your KMS but with Openfort. Please check the logs for more information.")
  }
  let userop_hash = result.nextAction.payload.userOperationHash!;
  let tin = result.id;
  console.log('Success! The message that the KMS needs to sign is: '+userop_hash);
  let response =
    "1- Sending a POST request to /v1/transaction_intents, so Openfort generates a userOperation for us to sign</br> </br>\n";
  response +=
    "2- Receiving the userOp generated by Openfort. Its hash, that need to be signed to sign by the account owner, is: " +
    userop_hash;
  let signed_message = await sign_userop_hash(userop_hash);
  console.log('Success! The signed message is: '+signed_message);
  response +=
    "</br>  </br>3- Signed userop hash generated by the KMS: " + signed_message;

  const requestData2 = {
    id: tin,
    signature: signed_message,
    optimistic: false,
  };

  try {
    if (!apiUrl) {
      throw "No API URL provided";
    }
    result = await openfort.transactionIntents.signature(requestData2)
    if(result.response?.status ===1 && result?.response?.logs){
      response += "</br>  </br>4- Transaction intent signed successfully! The transaction hash is: " + result?.response?.logs[0].transactionHash;
    }
  } catch (error) {
    console.error("Error:", error);
    throw error;
  }
  res.send(response);
});

// Sign_KMS call:
// It will get a userOp hash and sign it using the configured GCP KMS
app.get("/Sign_KMS", async (req: Request, res: Response) => {
  if (!req.query.userOperationHash) {
    let error = "Error: Missing userOperationHash parameter.";
    console.error(error);
    res.send(error);
  } else if (req.query.userOperationHash.length != 66) {
    let error = "Wrong userOp hash length.";
    console.error(error);
    res.send(error);
  } else {
    let userop_hash = req.query.userOperationHash as string;
    console.log('Success! The message that the KMS needs to sign is: '+userop_hash);
    let response = "1- UserOp hash to sign: " + userop_hash;
    let signed_message = await sign_userop_hash(userop_hash);
    console.log('Success! The signed message is: '+signed_message);
    response += "</br>  </br> 2- Signed userop hash: " + signed_message;
    res.send(response);
  }
});

app.listen(port, () => {
  console.log(`⚡️[server]: Server is running at http://localhost:${port}`);
});